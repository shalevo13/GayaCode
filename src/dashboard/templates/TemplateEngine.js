import { ITemplateEngine } from '../../core/interfaces/Types.js'

/**
 * Simple template engine for HTML generation
 * Follows Single Responsibility Principle - only handles template rendering
 */
export class SimpleTemplateEngine extends ITemplateEngine {
  /**
   * Render a template with data
   * @param {string} template - Template string with placeholders
   * @param {Object} data - Data to inject into template
   * @returns {string} Rendered template
   */
  render(template, data) {
    return template.replace(/\{\{([^}]+)\}\}/g, (match, key) => {
      const value = this.getNestedValue(data, key.trim())
      return value !== undefined ? value : match
    })
  }

  /**
   * Get nested value from object using dot notation
   * @param {Object} obj - Object to search
   * @param {string} path - Dot notation path (e.g., 'metrics.energyKwh')
   * @returns {*} Value at path or undefined
   */
  getNestedValue(obj, path) {
    return path.split('.').reduce((current, key) => {
      return current && current[key] !== undefined ? current[key] : undefined
    }, obj)
  }

  /**
   * Render template with conditional blocks
   * @param {string} template - Template with {{#if condition}} blocks
   * @param {Object} data - Data context
   * @returns {string} Rendered template
   */
  renderWithConditionals(template, data) {
    // Handle {{#if condition}} blocks
    const ifPattern = /\{\{#if\s+([^}]+)\}\}([\s\S]*?)\{\{\/if\}\}/g
    let result = template.replace(ifPattern, (match, condition, content) => {
      const conditionValue = this.evaluateCondition(condition, data)
      return conditionValue ? content : ''
    })

    // Handle {{#each array}} blocks
    const eachPattern = /\{\{#each\s+([^}]+)\}\}([\s\S]*?)\{\{\/each\}\}/g
    result = result.replace(eachPattern, (match, arrayPath, itemTemplate) => {
      const array = this.getNestedValue(data, arrayPath)
      if (!Array.isArray(array)) return ''
      
      return array.map((item, index) => {
        return this.render(itemTemplate, { ...data, item: item, index: index })
      }).join('')
    })

    // Handle regular substitutions
    return this.render(result, data)
  }

  /**
   * Evaluate a simple condition
   * @param {string} condition - Condition string
   * @param {Object} data - Data context
   * @returns {boolean} Condition result
   */
  evaluateCondition(condition, data) {
    const value = this.getNestedValue(data, condition)
    return Boolean(value)
  }
}

/**
 * HTML Document Template
 * Base template for all dashboard pages
 */
export class HTMLDocumentTemplate {
  constructor(templateEngine = new SimpleTemplateEngine()) {
    this.templateEngine = templateEngine
  }

  /**
   * Generate complete HTML document
   * @param {Object} data - Page data
   * @param {Array} components - Array of dashboard components
   * @returns {string} Complete HTML document
   */
  render(data, components) {
    const template = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸŒ± GayaCode Analysis - {{scriptName}}</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <style>
        {{styles}}
    </style>
</head>
<body>
    <div class="container">
        {{content}}
        
        <!-- Footer -->
        <footer class="footer">
            <p>Generated by <strong>ðŸŒ± GayaCode</strong> - Making code more sustainable, one script at a time.</p>
            <p>Analysis completed in {{metrics.executionTime}}ms with {{metrics.samples}} data points.</p>
        </footer>
    </div>

    <script>
        {{scripts}}
    </script>
</body>
</html>`

    // Generate content from components
    const content = components.map(component => component.generateHTML(data)).join('\n')
    
    // Generate styles from components
    const styles = this.generateBaseCSS() + '\n' + 
      components.map(component => component.generateCSS()).join('\n')
    
    // Generate scripts from components
    const scripts = components
      .filter(component => typeof component.generateJavaScript === 'function')
      .map(component => component.generateJavaScript(data))
      .join('\n')

    return this.templateEngine.render(template, {
      ...data,
      content,
      styles,
      scripts
    })
  }

  /**
   * Generate base CSS styles shared across all components
   * @returns {string} Base CSS
   */
  generateBaseCSS() {
    return `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: radial-gradient(ellipse at top, #1e293b 0%, #0f172a 100%);
        min-height: 100vh;
        padding: 20px;
        color: #e2e8f0;
      }

      .container {
        max-width: 1400px;
        margin: 0 auto;
        background: rgba(30, 41, 59, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(148, 163, 184, 0.2);
        overflow: hidden;
      }

      .footer {
        background: rgba(15, 23, 42, 0.8);
        padding: 24px 40px;
        text-align: center;
        color: #94a3b8;
        font-size: 0.9rem;
        border-top: 1px solid rgba(148, 163, 184, 0.2);
      }

      .footer p {
        margin-bottom: 4px;
      }

      .footer strong {
        color: #22c55e;
      }

      @media (max-width: 768px) {
        .container {
          margin: 10px;
          border-radius: 16px;
        }

        .forest-container, .radar-container {
          grid-template-columns: 1fr;
          gap: 20px;
        }

        .flow-legend {
          position: relative;
          top: auto;
          right: auto;
          margin-top: 16px;
        }

        .forest-stats, .radar-insights {
          order: -1;
        }
      }
    `
  }
}
